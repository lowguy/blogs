{
	"result":[
		{"type":1,"content":"最近看了一个小伙设计的秒杀功能"},
		{"type":2,"content":"//查询商品库存 获得库存量num\nif( num > 0 ){\n\t//开启事务\n\t//生产订单\n\t//更新商品库存量 num-1\n}"},
		{"type":1,"content":"乍一看，好像没啥不对，来想一个现实问题，加入库存量为1，同时有n(n>1)个人下单,所以他们都会查询到库存num>0的这个事实，所以最后都会生成订单，那库存就会成为1-n，超售了，要么补要么就好好做公关。"},
		{"type":5,"content":"如何解决这个问题呢？且来一步一看"},
		{"type":4,"content":"一 悲观锁思路"},
		{"type":1,"content":"也就是说在更新数据的时候，采用锁定状态，排斥外部请求的修改，遇到加锁就必须等待，此思路所可以解决这个流程问题，但是同样没有根本性的解决，高并发时会有很多请求都等在外边，响应时间延长，甚至有的请求直接就挂在这里了"},
		{"type":4,"content":"二 队列思路"},
		{"type":1,"content":"采用队列（吃了拉）这样的话就不会导致某些请求永远等不到锁，这个我们是强制把多线程改为单线程处理的意思，但还是会有新问题，首先秒杀时瞬间性的，所以短时间内会需要很大的内存队列，而服务器的处理是否会跟的上，这个也会导致系统出现异常"},
		{"type":4,"content":"三 乐观锁思路"},
		{"type":1,"content":"这个时候，我们就可以讨论一下\"乐观锁\"的思路了。乐观锁，是相对于\"悲观锁\"采用更为宽松的加锁机制，大都是采用带版本号（Version）更新。实现就是，这个数据所有请求都有资格去修改，但会获得一个该数据的版本号，只有版本号符合的才能更新成功，其他的返回抢购失败。这样的话，我们就不需要考虑队列的问题，不过，它会增大CPU的计算开销。但是，综合来说，这是一个比较好的解决方案"},
		{"type":5,"content":"以上我们只讨论了秒杀的实现，可细细想想秒杀何止这么简单"},
		{"type":3,"content":"1 对现有网站业务的冲击"},
		{"type":1,"content":"秒杀的时间限制促成了她的高并发性，如果与原有的应用部署在一起，可能会因为这一个附加的秒杀功能引起整个网站的瘫痪；<br/>解决方案：虽小但是他最是磨人的，所以不用考虑独立部署，如果有需要完全和原有的应用隔离都行"},
		{"type":3,"content":"2 高并发数据库的负载"},
		{"type":1,"content":"还记得我们为了抢红包发表情嘛？为啥？位的是不要错过一个亿，秒杀用户已如此，在即将到来的秒杀他们会疯狂的刷新，刷新，还是刷新，如果按照一般的访问应用服务器、数据库，短时间内会数据库会亚历山大<br/>解决方案：此页面单独静态化"},
		{"type":3,"content":"3 突然的网络和服务器带宽的增加"},
		{"type":1,"content":"假如一个商品页200k，一秒10k的用户带宽20G都压力山大了，平时估计2G就够了\n解决方案：为了短时间的带宽可以租借带宽"},
		{"type":3,"content":"4 防止被黑"},
		{"type":1,"content":"不知道你们有没有玩过，在商城网站中你在下订单前改一下产品编号就下的是另一个产品了，这个也就是说如果你设计的秒杀下订单还是一个普通的下单，那就会被人提前知道下订单的url，不用等早就抢光了。<br/>解决方案：下订单做时间判断，url动态化，只有到了时间才会得到随机验证身份参数"},
		{"type":3,"content":"5 防止机器（作弊的那种）秒杀"},
		{"type":1,"content":"曾经风流过的微信抢红包，可还记得，至于网传的机械臂抢红包，那这个没招，不过他虽然属于机器，但它不是作弊，有单账户多请求，多账号同一个ip请求，多账号多ip请求（这个基本就是个真实用户，但大多是僵尸啊平时不活跃，只为了秒杀而来的大军，如果没有其他限制这就是个正常用户）<br/>解决方案：具体情况想办法，比如常见的有验证码啦，IP限制la，一个账号限制等等"}
	]
}